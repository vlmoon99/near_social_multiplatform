import type { BuildColumns } from "drizzle-orm/column-builder";
import { entityKind } from "drizzle-orm/entity";
import { Table, type TableConfig as TableConfigBase, type UpdateTableConfig } from "drizzle-orm/table";
import type { CheckBuilder } from "drizzle-orm/sqlite-core/checks";
import { type SQLiteColumnBuilders } from "drizzle-orm/sqlite-core/columns/all";
import type { SQLiteColumn, SQLiteColumnBuilderBase } from "drizzle-orm/sqlite-core/columns/common";
import type { ForeignKeyBuilder } from "drizzle-orm/sqlite-core/foreign-keys";
import type { IndexBuilder } from "drizzle-orm/sqlite-core/indexes";
import type { PrimaryKeyBuilder } from "drizzle-orm/sqlite-core/primary-keys";
import type { UniqueConstraintBuilder } from "drizzle-orm/sqlite-core/unique-constraint";
export type SQLiteTableExtraConfigValue = IndexBuilder | CheckBuilder | ForeignKeyBuilder | PrimaryKeyBuilder | UniqueConstraintBuilder;
export type SQLiteTableExtraConfig = Record<string, SQLiteTableExtraConfigValue>;
export type TableConfig = TableConfigBase<SQLiteColumn<any>>;
export declare class SQLiteTable<T extends TableConfig = TableConfig> extends Table<T> {
    static readonly [entityKind]: string;
}
export type AnySQLiteTable<TPartial extends Partial<TableConfig> = {}> = SQLiteTable<UpdateTableConfig<TableConfig, TPartial>>;
export type SQLiteTableWithColumns<T extends TableConfig> = SQLiteTable<T> & {
    [Key in keyof T['columns']]: T['columns'][Key];
};
export interface SQLiteTableFn<TSchema extends string | undefined = undefined> {
    /**
     * @deprecated The third parameter of sqliteTable is changing and will only accept an array instead of an object
     *
     * @example
     * Deprecated version:
     * ```ts
     * export const users = sqliteTable("users", {
     * 	id: int(),
     * }, (t) => ({
     * 	idx: index('custom_name').on(t.id)
     * }));
     * ```
     *
     * New API:
     * ```ts
     * export const users = sqliteTable("users", {
     * 	id: int(),
     * }, (t) => [
     * 	index('custom_name').on(t.id)
     * ]);
     * ```
     */
    <TTableName extends string, TColumnsMap extends Record<string, SQLiteColumnBuilderBase>>(name: TTableName, columns: TColumnsMap, extraConfig?: (self: BuildColumns<TTableName, TColumnsMap, 'sqlite'>) => SQLiteTableExtraConfig): SQLiteTableWithColumns<{
        name: TTableName;
        schema: TSchema;
        columns: BuildColumns<TTableName, TColumnsMap, 'sqlite'>;
        dialect: 'sqlite';
    }>;
    /**
     * @deprecated The third parameter of sqliteTable is changing and will only accept an array instead of an object
     *
     * @example
     * Deprecated version:
     * ```ts
     * export const users = sqliteTable("users", {
     * 	id: int(),
     * }, (t) => ({
     * 	idx: index('custom_name').on(t.id)
     * }));
     * ```
     *
     * New API:
     * ```ts
     * export const users = sqliteTable("users", {
     * 	id: int(),
     * }, (t) => [
     * 	index('custom_name').on(t.id)
     * ]);
     * ```
     */
    <TTableName extends string, TColumnsMap extends Record<string, SQLiteColumnBuilderBase>>(name: TTableName, columns: (columnTypes: SQLiteColumnBuilders) => TColumnsMap, extraConfig?: (self: BuildColumns<TTableName, TColumnsMap, 'sqlite'>) => SQLiteTableExtraConfig): SQLiteTableWithColumns<{
        name: TTableName;
        schema: TSchema;
        columns: BuildColumns<TTableName, TColumnsMap, 'sqlite'>;
        dialect: 'sqlite';
    }>;
    <TTableName extends string, TColumnsMap extends Record<string, SQLiteColumnBuilderBase>>(name: TTableName, columns: TColumnsMap, extraConfig?: (self: BuildColumns<TTableName, TColumnsMap, 'sqlite'>) => SQLiteTableExtraConfigValue[]): SQLiteTableWithColumns<{
        name: TTableName;
        schema: TSchema;
        columns: BuildColumns<TTableName, TColumnsMap, 'sqlite'>;
        dialect: 'sqlite';
    }>;
    <TTableName extends string, TColumnsMap extends Record<string, SQLiteColumnBuilderBase>>(name: TTableName, columns: (columnTypes: SQLiteColumnBuilders) => TColumnsMap, extraConfig?: (self: BuildColumns<TTableName, TColumnsMap, 'sqlite'>) => SQLiteTableExtraConfigValue[]): SQLiteTableWithColumns<{
        name: TTableName;
        schema: TSchema;
        columns: BuildColumns<TTableName, TColumnsMap, 'sqlite'>;
        dialect: 'sqlite';
    }>;
}
export declare const sqliteTable: SQLiteTableFn;
export declare function sqliteTableCreator(customizeTableName: (name: string) => string): SQLiteTableFn;
