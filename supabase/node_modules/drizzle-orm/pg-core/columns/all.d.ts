import { bigint } from "drizzle-orm/pg-core/columns/bigint";
import { bigserial } from "drizzle-orm/pg-core/columns/bigserial";
import { boolean } from "drizzle-orm/pg-core/columns/boolean";
import { char } from "drizzle-orm/pg-core/columns/char";
import { cidr } from "drizzle-orm/pg-core/columns/cidr";
import { customType } from "drizzle-orm/pg-core/columns/custom";
import { date } from "drizzle-orm/pg-core/columns/date";
import { doublePrecision } from "drizzle-orm/pg-core/columns/double-precision";
import { inet } from "drizzle-orm/pg-core/columns/inet";
import { integer } from "drizzle-orm/pg-core/columns/integer";
import { interval } from "drizzle-orm/pg-core/columns/interval";
import { json } from "drizzle-orm/pg-core/columns/json";
import { jsonb } from "drizzle-orm/pg-core/columns/jsonb";
import { line } from "drizzle-orm/pg-core/columns/line";
import { macaddr } from "drizzle-orm/pg-core/columns/macaddr";
import { macaddr8 } from "drizzle-orm/pg-core/columns/macaddr8";
import { numeric } from "drizzle-orm/pg-core/columns/numeric";
import { point } from "drizzle-orm/pg-core/columns/point";
import { geometry } from "drizzle-orm/pg-core/columns/postgis_extension/geometry";
import { real } from "drizzle-orm/pg-core/columns/real";
import { serial } from "drizzle-orm/pg-core/columns/serial";
import { smallint } from "drizzle-orm/pg-core/columns/smallint";
import { smallserial } from "drizzle-orm/pg-core/columns/smallserial";
import { text } from "drizzle-orm/pg-core/columns/text";
import { time } from "drizzle-orm/pg-core/columns/time";
import { timestamp } from "drizzle-orm/pg-core/columns/timestamp";
import { uuid } from "drizzle-orm/pg-core/columns/uuid";
import { varchar } from "drizzle-orm/pg-core/columns/varchar";
import { bit } from "drizzle-orm/pg-core/columns/vector_extension/bit";
import { halfvec } from "drizzle-orm/pg-core/columns/vector_extension/halfvec";
import { sparsevec } from "drizzle-orm/pg-core/columns/vector_extension/sparsevec";
import { vector } from "drizzle-orm/pg-core/columns/vector_extension/vector";
export declare function getPgColumnBuilders(): {
    bigint: typeof bigint;
    bigserial: typeof bigserial;
    boolean: typeof boolean;
    char: typeof char;
    cidr: typeof cidr;
    customType: typeof customType;
    date: typeof date;
    doublePrecision: typeof doublePrecision;
    inet: typeof inet;
    integer: typeof integer;
    interval: typeof interval;
    json: typeof json;
    jsonb: typeof jsonb;
    line: typeof line;
    macaddr: typeof macaddr;
    macaddr8: typeof macaddr8;
    numeric: typeof numeric;
    point: typeof point;
    geometry: typeof geometry;
    real: typeof real;
    serial: typeof serial;
    smallint: typeof smallint;
    smallserial: typeof smallserial;
    text: typeof text;
    time: typeof time;
    timestamp: typeof timestamp;
    uuid: typeof uuid;
    varchar: typeof varchar;
    bit: typeof bit;
    halfvec: typeof halfvec;
    sparsevec: typeof sparsevec;
    vector: typeof vector;
};
export type PgColumnsBuilders = ReturnType<typeof getPgColumnBuilders>;
